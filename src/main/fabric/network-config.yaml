---
#
# The network connection profile provides client applications the information about the target
# blockchain network that are necessary for the applications to interact with it. These are all
# knowledge that must be acquired from out-of-band sources. This file provides such a source.
#
name: "fabric"

#
# Any properties with an "x-" prefix will be treated as application-specific, exactly like how naming
# in HTTP headers or swagger properties work. The SDK will simply ignore these fields and leave
# them for the applications to process. This is a mechanism for different components of an application
# to exchange information that are not part of the standard schema described below. In particular,
# the "x-type" property with the "hlfv1" value example below is used by Hyperledger Composer to
# determine the type of Fabric networks (v0.6 vs. v1.0) it needs to work with.
#
x-type: "hlfv1.4"

#
# Describe what the target network is/does.
#
description: "fabric network"

#
# Schema version of the content. Used by the SDK to apply the corresponding parsing rules.
#
version: "1.0"

#
# The client section will be added on a per org basis see org1.yaml and org2.yaml
#
client:
  organization: Org1

#
# [Optional]. But most apps would have this section so that channel objects can be constructed
# based on the content below. If an app is creating channels, then it likely will not need this
# section.
#
channels:
  # name of the channel
  mychannel:
    # Required. list of orderers designated by the application to use for transactions on this
    # channel. This list can be a result of access control ("org1" can only access "ordererA"), or
    # operational decisions to share loads from applications among the orderers.  The values must
    # be "names" of orgs defined under "organizations/peers"
    orderers:
      - orderer2.example.com
      - orderer1.example.com

    # Required. list of peers from participating orgs
    peers:
      peer0.org1.example.com:
        # [Optional]. will this peer be sent transaction proposals for endorsement? The peer must
        # have the chaincode installed. The app can also use this property to decide which peers
        # to send the chaincode install request. Default: true
        endorsingPeer: true

        # [Optional]. will this peer be sent query proposals? The peer must have the chaincode
        # installed. The app can also use this property to decide which peers to send the
        # chaincode install request. Default: true
        chaincodeQuery: true

        # [Optional]. will this peer be sent query proposals that do not require chaincodes, like
        # queryBlock(), queryTransaction(), etc. Default: true
        ledgerQuery: true

        # [Optional]. will this peer be the target of the SDK's listener registration? All peers can
        # produce events but the app typically only needs to connect to one to listen to events.
        # Default: true
        eventSource: true

      peer0.org2.example.com:
        endorsingPeer: true
        chaincodeQuery: true
        ledgerQuery: true
        eventSource: true



    # [Optional]. what chaincodes are expected to exist on this channel? The application can use
    # this information to validate that the target peers are in the expected state by comparing
    # this list with the query results of getInstalledChaincodes() and getInstantiatedChaincodes()
    chaincodes:
      # the format follows the "cannonical name" of chaincodes by fabric code
      - mycc:v0

#
# list of participating organizations in this network
#
organizations:
  Org1:
    mspid: Org1MSP
    peers:
      - peer0.org1.example.com
    certificateAuthorities:
      - ca-org1
      - ca-org1-tls

    # convenience in development mode, production systems should not expose sensitive information
    # this way. The SDK should allow applications to set the org admin identity via APIs, and only use
    # this route as an alternative when it exists.
    adminPrivateKey:
      path: /opt/fabric-sdk-node/artifacts/channel/crypto-config/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp/keystore/df125d883fa69baaf5877ae1ee29ac4853565f4216e30be8cf3451960e4459d6_sk
    signedCert:
      path: /opt/fabric-sdk-node/artifacts/channel/crypto-config/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp/signcerts/cert.pem

  # the profile will contain public information about organizations other than the one it belongs to.
  # These are necessary information to make transaction lifecycles work, including MSP IDs and
  # peers with a public URL to send transaction proposals. The file will not contain private
  # information reserved for members of the organization, such as admin key and certificate,
  # fabric-ca registrar enroll ID and secret, etc.
  Org2:
    mspid: Org2MSP
    peers:
      - peer0.org2.example.com
    certificateAuthorities:
      - ca-org2
      - ca-org2-tls

#
# List of orderers to send transaction and channel create/update requests to. For the time
# being only one orderer is needed. If more than one is defined, which one get used by the
# SDK is implementation specific. Consult each SDK's documentation for its handling of orderers.
#
orderers:
  orderer2.example.com:
    url: grpcs://orderer2.example.com:8050

    # these are standard properties defined by the gRPC library
    # they will be passed in as-is to gRPC client constructor
    grpcOptions:
#      verify: false
      ssl-target-name-override: orderer2.example.com
      hostnameOverride: orderer2.example.com

    tlsCACerts:
      pem: |
          -----BEGIN CERTIFICATE-----
          MIICLDCCAdOgAwIBAgIUUqs0D5ZThARiYj5nR4431SCZupowCgYIKoZIzj0EAwIw
          aDELMAkGA1UEBhMCVVMxFzAVBgNVBAgTDk5vcnRoIENhcm9saW5hMRQwEgYDVQQK
          EwtIeXBlcmxlZGdlcjEPMA0GA1UECxMGRmFicmljMRkwFwYDVQQDExBmYWJyaWMt
          Y2Etc2VydmVyMB4XDTE5MDYwMzE0NDIwMFoXDTI0MDYwMTE0NDcwMFowXTELMAkG
          A1UEBhMCVVMxFzAVBgNVBAgTDk5vcnRoIENhcm9saW5hMRQwEgYDVQQKEwtIeXBl
          cmxlZGdlcjEPMA0GA1UECxMGY2xpZW50MQ4wDAYDVQQDEwVhZG1pbjBZMBMGByqG
          SM49AgEGCCqGSM49AwEHA0IABO1LKkzY9b7Ryq07kdoUgdHUH/ueJdyLDHGunISO
          3+bVfadoQQwreFEpianHajFEsLVfNg7TXFOG93LQo3SSlkejZjBkMA4GA1UdDwEB
          /wQEAwIBBjASBgNVHRMBAf8ECDAGAQH/AgECMB0GA1UdDgQWBBSvpoAWFhZtHY8V
          6KHAw1P3e1n1GTAfBgNVHSMEGDAWgBRopZCVOM+Z14LmHydQGqnTmAplgjAKBggq
          hkjOPQQDAgNHADBEAiApCfwIEo54ZgWztZllHLHnzLwTf6eMcQrWoYlD1muD2wIg
          Ik44uaREWfMe30KAKLPraYBWQhAj9CLxOxrsFZkny5Y=
          -----END CERTIFICATE-----
          -----BEGIN CERTIFICATE-----
          MIICFzCCAb2gAwIBAgIUPQI91XFTa/DELPij9cFmIhBmGH8wCgYIKoZIzj0EAwIw
          aDELMAkGA1UEBhMCVVMxFzAVBgNVBAgTDk5vcnRoIENhcm9saW5hMRQwEgYDVQQK
          EwtIeXBlcmxlZGdlcjEPMA0GA1UECxMGRmFicmljMRkwFwYDVQQDExBmYWJyaWMt
          Y2Etc2VydmVyMB4XDTE5MDYwMzE0NDIwMFoXDTM0MDUzMDE0NDIwMFowaDELMAkG
          A1UEBhMCVVMxFzAVBgNVBAgTDk5vcnRoIENhcm9saW5hMRQwEgYDVQQKEwtIeXBl
          cmxlZGdlcjEPMA0GA1UECxMGRmFicmljMRkwFwYDVQQDExBmYWJyaWMtY2Etc2Vy
          dmVyMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEaK/A3LG/isMpaX0sBvAhk/md
          SVJ1dBKANiXL3QdCoyza35ta6U6aHWg7w3/QQ4duoCw4dG4rz0YiqL45r7ARIqNF
          MEMwDgYDVR0PAQH/BAQDAgEGMBIGA1UdEwEB/wQIMAYBAf8CAQIwHQYDVR0OBBYE
          FGilkJU4z5nXguYfJ1AaqdOYCmWCMAoGCCqGSM49BAMCA0gAMEUCIQCSWHwxwaHr
          Q5op3+zAacvKQ0Eg9xqv/ogGSoCwSF8X2QIgMRbkoOUuA6aJArEGMn9ihJy7CBDE
          z2x0cGUnfNTop60=
          -----END CERTIFICATE-----


  orderer1.example.com:
    url: grpcs://orderer1.example.com:7050

    # these are standard properties defined by the gRPC library
    # they will be passed in as-is to gRPC client constructor
    grpcOptions:
#      verify: false
      ssl-target-name-override: orderer1.example.com
      hostnameOverride: orderer1.example.com

    tlsCACerts:
      pem: |
          -----BEGIN CERTIFICATE-----
          MIICLDCCAdOgAwIBAgIUUqs0D5ZThARiYj5nR4431SCZupowCgYIKoZIzj0EAwIw
          aDELMAkGA1UEBhMCVVMxFzAVBgNVBAgTDk5vcnRoIENhcm9saW5hMRQwEgYDVQQK
          EwtIeXBlcmxlZGdlcjEPMA0GA1UECxMGRmFicmljMRkwFwYDVQQDExBmYWJyaWMt
          Y2Etc2VydmVyMB4XDTE5MDYwMzE0NDIwMFoXDTI0MDYwMTE0NDcwMFowXTELMAkG
          A1UEBhMCVVMxFzAVBgNVBAgTDk5vcnRoIENhcm9saW5hMRQwEgYDVQQKEwtIeXBl
          cmxlZGdlcjEPMA0GA1UECxMGY2xpZW50MQ4wDAYDVQQDEwVhZG1pbjBZMBMGByqG
          SM49AgEGCCqGSM49AwEHA0IABO1LKkzY9b7Ryq07kdoUgdHUH/ueJdyLDHGunISO
          3+bVfadoQQwreFEpianHajFEsLVfNg7TXFOG93LQo3SSlkejZjBkMA4GA1UdDwEB
          /wQEAwIBBjASBgNVHRMBAf8ECDAGAQH/AgECMB0GA1UdDgQWBBSvpoAWFhZtHY8V
          6KHAw1P3e1n1GTAfBgNVHSMEGDAWgBRopZCVOM+Z14LmHydQGqnTmAplgjAKBggq
          hkjOPQQDAgNHADBEAiApCfwIEo54ZgWztZllHLHnzLwTf6eMcQrWoYlD1muD2wIg
          Ik44uaREWfMe30KAKLPraYBWQhAj9CLxOxrsFZkny5Y=
          -----END CERTIFICATE-----
          -----BEGIN CERTIFICATE-----
          MIICFzCCAb2gAwIBAgIUPQI91XFTa/DELPij9cFmIhBmGH8wCgYIKoZIzj0EAwIw
          aDELMAkGA1UEBhMCVVMxFzAVBgNVBAgTDk5vcnRoIENhcm9saW5hMRQwEgYDVQQK
          EwtIeXBlcmxlZGdlcjEPMA0GA1UECxMGRmFicmljMRkwFwYDVQQDExBmYWJyaWMt
          Y2Etc2VydmVyMB4XDTE5MDYwMzE0NDIwMFoXDTM0MDUzMDE0NDIwMFowaDELMAkG
          A1UEBhMCVVMxFzAVBgNVBAgTDk5vcnRoIENhcm9saW5hMRQwEgYDVQQKEwtIeXBl
          cmxlZGdlcjEPMA0GA1UECxMGRmFicmljMRkwFwYDVQQDExBmYWJyaWMtY2Etc2Vy
          dmVyMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEaK/A3LG/isMpaX0sBvAhk/md
          SVJ1dBKANiXL3QdCoyza35ta6U6aHWg7w3/QQ4duoCw4dG4rz0YiqL45r7ARIqNF
          MEMwDgYDVR0PAQH/BAQDAgEGMBIGA1UdEwEB/wQIMAYBAf8CAQIwHQYDVR0OBBYE
          FGilkJU4z5nXguYfJ1AaqdOYCmWCMAoGCCqGSM49BAMCA0gAMEUCIQCSWHwxwaHr
          Q5op3+zAacvKQ0Eg9xqv/ogGSoCwSF8X2QIgMRbkoOUuA6aJArEGMn9ihJy7CBDE
          z2x0cGUnfNTop60=
          -----END CERTIFICATE-----

#
# List of peers to send various requests to, including endorsement, query
# and event listener registration.
#
peers:
  peer0.org1.example.com:
    # this URL is used to send endorsement and query requests
    url: grpcs://peer0.org1.example.com:7051

    # this URL is used to connect the EventHub and registering event listeners
#    eventUrl: grpcs://peer0.org1.example.com:7053

    grpcOptions:
#      verify: false
      ssl-target-name-override: peer0.org1.example.com
      hostnameOverride: peer0.org1.example.com
    tlsCACerts:
      pem: |
           -----BEGIN CERTIFICATE-----
           MIICLDCCAdOgAwIBAgIUZ8FJacGemHq+2luiTpID8T3HnhcwCgYIKoZIzj0EAwIw
           aDELMAkGA1UEBhMCVVMxFzAVBgNVBAgTDk5vcnRoIENhcm9saW5hMRQwEgYDVQQK
           EwtIeXBlcmxlZGdlcjEPMA0GA1UECxMGRmFicmljMRkwFwYDVQQDExBmYWJyaWMt
           Y2Etc2VydmVyMB4XDTE5MDYwMzE0NDIwMFoXDTI0MDYwMTE0NDcwMFowXTELMAkG
           A1UEBhMCVVMxFzAVBgNVBAgTDk5vcnRoIENhcm9saW5hMRQwEgYDVQQKEwtIeXBl
           cmxlZGdlcjEPMA0GA1UECxMGY2xpZW50MQ4wDAYDVQQDEwVhZG1pbjBZMBMGByqG
           SM49AgEGCCqGSM49AwEHA0IABBxqdfRiNVAF24gNc8N4Hri7wSfUzc0arGwzpZPT
           2aANYECBZXpTdF9a0mN10EkQZctytWFZsshxkABLart0eMyjZjBkMA4GA1UdDwEB
           /wQEAwIBBjASBgNVHRMBAf8ECDAGAQH/AgECMB0GA1UdDgQWBBRRuq+12Q7pr1No
           fDo1GWT0xyDzHjAfBgNVHSMEGDAWgBRopZCVOM+Z14LmHydQGqnTmAplgjAKBggq
           hkjOPQQDAgNHADBEAiAuJ3Gi0990BsEuYTzwQxefOzBTmdGY1IRPpGiQWntSsQIg
           Rj1myZRsXsUv3Cwa6TH70lzygFx2P3ZGnmAXo50s/UU=
           -----END CERTIFICATE-----
           -----BEGIN CERTIFICATE-----
           MIICFzCCAb2gAwIBAgIUPQI91XFTa/DELPij9cFmIhBmGH8wCgYIKoZIzj0EAwIw
           aDELMAkGA1UEBhMCVVMxFzAVBgNVBAgTDk5vcnRoIENhcm9saW5hMRQwEgYDVQQK
           EwtIeXBlcmxlZGdlcjEPMA0GA1UECxMGRmFicmljMRkwFwYDVQQDExBmYWJyaWMt
           Y2Etc2VydmVyMB4XDTE5MDYwMzE0NDIwMFoXDTM0MDUzMDE0NDIwMFowaDELMAkG
           A1UEBhMCVVMxFzAVBgNVBAgTDk5vcnRoIENhcm9saW5hMRQwEgYDVQQKEwtIeXBl
           cmxlZGdlcjEPMA0GA1UECxMGRmFicmljMRkwFwYDVQQDExBmYWJyaWMtY2Etc2Vy
           dmVyMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEaK/A3LG/isMpaX0sBvAhk/md
           SVJ1dBKANiXL3QdCoyza35ta6U6aHWg7w3/QQ4duoCw4dG4rz0YiqL45r7ARIqNF
           MEMwDgYDVR0PAQH/BAQDAgEGMBIGA1UdEwEB/wQIMAYBAf8CAQIwHQYDVR0OBBYE
           FGilkJU4z5nXguYfJ1AaqdOYCmWCMAoGCCqGSM49BAMCA0gAMEUCIQCSWHwxwaHr
           Q5op3+zAacvKQ0Eg9xqv/ogGSoCwSF8X2QIgMRbkoOUuA6aJArEGMn9ihJy7CBDE
           z2x0cGUnfNTop60=
           -----END CERTIFICATE-----

  peer0.org2.example.com:
    url: grpcs://peer0.org2.example.com:8051
#    eventUrl: grpc://peer0.org2.example.com:8053
    grpcOptions:
#      verify: false
      ssl-target-name-override: peer0.org2.example.com
      hostnameOverride: peer0.org2.example.com
    tlsCACerts:
      pem: |
          -----BEGIN CERTIFICATE-----
          MIICLTCCAdOgAwIBAgIUKVJ09D6sI7ZfxqhH5kJKOxWGcJkwCgYIKoZIzj0EAwIw
          aDELMAkGA1UEBhMCVVMxFzAVBgNVBAgTDk5vcnRoIENhcm9saW5hMRQwEgYDVQQK
          EwtIeXBlcmxlZGdlcjEPMA0GA1UECxMGRmFicmljMRkwFwYDVQQDExBmYWJyaWMt
          Y2Etc2VydmVyMB4XDTE5MDYwMzE0NDMwMFoXDTI0MDYwMTE0NDgwMFowXTELMAkG
          A1UEBhMCVVMxFzAVBgNVBAgTDk5vcnRoIENhcm9saW5hMRQwEgYDVQQKEwtIeXBl
          cmxlZGdlcjEPMA0GA1UECxMGY2xpZW50MQ4wDAYDVQQDEwVhZG1pbjBZMBMGByqG
          SM49AgEGCCqGSM49AwEHA0IABLZ4Bqxhdf3VG19NWUpQ2EA9Oe8TIs1vbsduQidz
          fB4HTJ3YLJ9q3FENooNeo6Eb2QSbmt1RspOaQPGmJFi37hSjZjBkMA4GA1UdDwEB
          /wQEAwIBBjASBgNVHRMBAf8ECDAGAQH/AgECMB0GA1UdDgQWBBSGzlmu+wfuCKzt
          UGM810IFyAV/XzAfBgNVHSMEGDAWgBRopZCVOM+Z14LmHydQGqnTmAplgjAKBggq
          hkjOPQQDAgNIADBFAiEAmsuriC7iZecD15+bel7hKdihciy7ACAceBifOsiKhGYC
          IBPRZAMFvZ3KraA+VLFIbtnv1cysNQTDjasdpbvfMsr/
          -----END CERTIFICATE-----
          -----BEGIN CERTIFICATE-----
          MIICFzCCAb2gAwIBAgIUPQI91XFTa/DELPij9cFmIhBmGH8wCgYIKoZIzj0EAwIw
          aDELMAkGA1UEBhMCVVMxFzAVBgNVBAgTDk5vcnRoIENhcm9saW5hMRQwEgYDVQQK
          EwtIeXBlcmxlZGdlcjEPMA0GA1UECxMGRmFicmljMRkwFwYDVQQDExBmYWJyaWMt
          Y2Etc2VydmVyMB4XDTE5MDYwMzE0NDIwMFoXDTM0MDUzMDE0NDIwMFowaDELMAkG
          A1UEBhMCVVMxFzAVBgNVBAgTDk5vcnRoIENhcm9saW5hMRQwEgYDVQQKEwtIeXBl
          cmxlZGdlcjEPMA0GA1UECxMGRmFicmljMRkwFwYDVQQDExBmYWJyaWMtY2Etc2Vy
          dmVyMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEaK/A3LG/isMpaX0sBvAhk/md
          SVJ1dBKANiXL3QdCoyza35ta6U6aHWg7w3/QQ4duoCw4dG4rz0YiqL45r7ARIqNF
          MEMwDgYDVR0PAQH/BAQDAgEGMBIGA1UdEwEB/wQIMAYBAf8CAQIwHQYDVR0OBBYE
          FGilkJU4z5nXguYfJ1AaqdOYCmWCMAoGCCqGSM49BAMCA0gAMEUCIQCSWHwxwaHr
          Q5op3+zAacvKQ0Eg9xqv/ogGSoCwSF8X2QIgMRbkoOUuA6aJArEGMn9ihJy7CBDE
          z2x0cGUnfNTop60=
          -----END CERTIFICATE-----

#
# Fabric-CA is a special kind of Certificate Authority provided by Hyperledger Fabric which allows
# certificate management to be done via REST APIs. Application may choose to use a standard
# Certificate Authority instead of Fabric-CA, in which case this section would not be specified.
#
certificateAuthorities:
  ca-org1:
    url: http://ca.org1.example.com:7056
    # the properties specified under this object are passed to the 'http' client verbatim when
    # making the request to the Fabric-CA server
    httpOptions:
      verify: false
    # Fabric-CA supports dynamic user enrollment via REST APIs. A "root" user, a.k.a registrar, is
    # needed to enroll and invoke new users.
    registrar:
      - enrollId: Admin@org1.example.com
    # [Optional] The optional name of the CA.
    caName: intermediaca2

  ca-org1-tls:
    url: http://tlsca.org1.example.com:8056
    # the properties specified under this object are passed to the 'http' client verbatim when
    # making the request to the Fabric-CA server
    httpOptions:
      verify: false

    # Fabric-CA supports dynamic user enrollment via REST APIs. A "root" user, a.k.a registrar, is
    # needed to enroll and invoke new users.
    registrar:
      - enrollId: Admin@org1.example.com
    # [Optional] The optional name of the CA.
    caName: intermediacatls2

  ca-org2:
    url: http://ca.org1.example.com:7057
    httpOptions:
      verify: false
    registrar:
      - enrollId: Admin@org2.example.com
    # [Optional] The optional name of the CA.
    caName: intermediaca3

  ca-org2-tls:
    url: http://tlsca.org1.example.com:8057
    httpOptions:
      verify: false
    registrar:
      - enrollId: Admin@org2.example.com
    # [Optional] The optional name of the CA.
    caName: intermediacatls3
